// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  created_at       DateTime           @default(now())
  user_id          String?            @unique // For external provider IDs
  email            String             @unique
  full_name        String?
  avatar_url       String?
  auth_provider    String?
  email_verified   Boolean            @default(false)
  phone            String?
  last_sign_in_at  DateTime?
  updated_at       DateTime           @updatedAt
  provider_id      String?
  provider_sub     String?
  is_anonymous     Boolean            @default(false)
  role             String?            @default("user")
  refresh_token    String?
  onboardingData   OnboardingData[]
  Note             Note[]
  PromptSuggestion PromptSuggestion[]
}

model OnboardingData {
  id                String   @id @default(cuid())
  userId            String?
  jobTitle          String? // Now optional
  company           String?
  experience        String? // Now optional
  topSkills         String[]
  enjoyDislike      String?
  motivators        String? // Now optional, TODO: multi select bana do ise
  timeForGrowth     String? // Now optional
  linkedinUrl       String?
  industryInterest  String? // Now optional
  biggestConcern    String?
  detailedResponses Json? // Primary storage for all 50 question responses
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Waitlist {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  created_at DateTime @default(now())
}

model Note {
  id             String   @id @default(cuid())
  text           String   @db.Text
  userId         String
  conversationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  User User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model PromptSuggestion {
  id        String   @id @default(cuid())
  text      String   @db.Text
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  userId    String? // Optional - can be null for anonymous suggestions
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model CareerRecommendation {
  id              String   @id @default(cuid())
  userId          String
  title           String
  matchPercentage Int
  description     String   @db.Text
  skills          String[]
  growthOutlook   String
  salaryRange     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model LearningRoadmap {
  id             String   @id @default(cuid())
  userId         String
  testId         String?
  title          String
  description    String?  @db.Text
  weeks          Json[] // Array of week objects with learning activities
  totalWeeks     Int      @default(8)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  completedSteps Json[]   @default([]) // Track user progress
  careerPathId   String?

  @@index([userId])
  @@index([testId])
  @@index([careerPathId])
}

model CareerPathTest {
  id                   String         @id @default(cuid())
  userId               String
  careerPathId         String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  questions            TestQuestion[]
  userResponses        TestResponse[]
  completedAt          DateTime?
  score                Int?
  recommendations      Json[] // Changed from String[] to Json[] to store structured data
  selectedRoadmapIndex Int? // Added to track the selected roadmap

  @@index([userId])
  @@index([careerPathId])
}

model TestQuestion {
  id             String         @id @default(cuid())
  testId         String
  questionText   String
  options        String[]
  correctAnswer  Int
  careerPathTest CareerPathTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  userResponses  TestResponse[]
  order          Int

  @@index([testId])
}

model TestResponse {
  id             String         @id @default(cuid())
  testId         String
  questionId     String
  userAnswer     Int
  isCorrect      Boolean
  answeredAt     DateTime       @default(now())
  careerPathTest CareerPathTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  question       TestQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([questionId])
}
